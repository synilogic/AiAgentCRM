version: '3.8'

services:
  # MongoDB Database
  mongodb:
    image: mongo:6.0
    container_name: aiagentcrm_mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password123
      MONGO_INITDB_DATABASE: aiagentcrm
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./backend/scripts/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    networks:
      - aiagentcrm_network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: aiagentcrm_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - aiagentcrm_network

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: aiagentcrm_backend
    restart: unless-stopped
    environment:
      NODE_ENV: production
      MONGODB_URI: mongodb://admin:password123@mongodb:27017/aiagentcrm?authSource=admin
      REDIS_URL: redis://redis:6379
      JWT_SECRET: ${JWT_SECRET}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      RAZORPAY_KEY_ID: ${RAZORPAY_KEY_ID}
      RAZORPAY_KEY_SECRET: ${RAZORPAY_KEY_SECRET}
      EMAIL_SERVICE: ${EMAIL_SERVICE}
      EMAIL_USER: ${EMAIL_USER}
      EMAIL_PASS: ${EMAIL_PASS}
      FRONTEND_URL: ${FRONTEND_URL}
      ADMIN_URL: ${ADMIN_URL}
    ports:
      - "5000:5000"
    volumes:
      - ./backend:/app
      - /app/node_modules
    depends_on:
      - mongodb
      - redis
    networks:
      - aiagentcrm_network

  # User Frontend
  frontend:
    build:
      context: ./frontend-user
      dockerfile: Dockerfile
    container_name: aiagentcrm_frontend
    restart: unless-stopped
    environment:
      REACT_APP_API_URL: ${REACT_APP_API_URL}
      REACT_APP_RAZORPAY_KEY_ID: ${RAZORPAY_KEY_ID}
    ports:
      - "3000:3000"
    volumes:
      - ./frontend-user:/app
      - /app/node_modules
    depends_on:
      - backend
    networks:
      - aiagentcrm_network

  # Admin Frontend
  admin:
    build:
      context: ./frontend-admin
      dockerfile: Dockerfile
    container_name: aiagentcrm_admin
    restart: unless-stopped
    environment:
      REACT_APP_API_URL: ${REACT_APP_API_URL}
      REACT_APP_ADMIN_SECRET: ${ADMIN_SECRET}
    ports:
      - "3001:3000"
    volumes:
      - ./frontend-admin:/app
      - /app/node_modules
    depends_on:
      - backend
    networks:
      - aiagentcrm_network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: aiagentcrm_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - backend
      - frontend
      - admin
    networks:
      - aiagentcrm_network

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: aiagentcrm_prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - aiagentcrm_network

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: aiagentcrm_grafana
    restart: unless-stopped
    ports:
      - "3002:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin123
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    networks:
      - aiagentcrm_network

  # Backup Service
  backup:
    image: mongo:6.0
    container_name: aiagentcrm_backup
    restart: "no"
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password123
    volumes:
      - ./backups:/backups
      - ./scripts/backup.sh:/backup.sh:ro
    depends_on:
      - mongodb
    networks:
      - aiagentcrm_network
    command: ["/bin/bash", "/backup.sh"]

volumes:
  mongodb_data:
    driver: local
  redis_data:
    driver: local
  nginx_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  aiagentcrm_network:
    driver: bridge 